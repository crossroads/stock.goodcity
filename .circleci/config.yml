version: 2.1

aliases:
  - defaults: &defaults
      docker:
        - image: circleci/node:10.22
      working_directory: ~/code
  - &restore-repo-cache
    key: v1-stock-goodcity-{{ .Environment.CIRCLE_SHA1 }}
  - &restore-yarn-cache
    keys:
      - v1-stock-goodcity-packages-{{ checksum "yarn.lock" }}
  - &save-yarn-cache
    key: v1-stock-goodcity-packages-{{ checksum "yarn.lock" }}
    paths:
      - node_modules
      - ~/.cache/yarn
  - &restore-ios-yarn-cache
    keys:
      - v1-stock-goodcity-ios-yarn-packages-{{ checksum "yarn.lock" }}
  - &save-ios-yarn-cache
    key: v1-stock-goodcity-ios-yarn-packages-{{ checksum "yarn.lock" }}
    paths:
      - node_modules
      - ~/.cache/yarn
  - &yarn |
    yarn install --non-interactive --cache-folder ~/.cache/yarn --frozen-lockfile
  - &restore-bower-cache
    key: v1-stock-goodcity-bower-{{ checksum "bower.json" }}
  - &save-bower-cache
    key: v1-stock-goodcity-bower-{{ checksum "bower.json" }}
    paths:
      - bower_components
  - &restore-ios-bower-cache
    key: v1-stock-goodcity-ios-bower-components-{{ checksum "bower.json" }}
  - &save-ios-bower-cache
    key: v1-stock-goodcity-ios-bower-components-{{ checksum "bower.json" }}
    paths:
      - bower_components
  - &restore-bundle-cache
    key: v1-stock-goodcity-bundle-{{ checksum "Gemfile.lock" }}
  - &save-bundle-cache
    key: v1-stock-goodcity-bundle-{{ checksum "Gemfile.lock" }}
    paths:
      - vendor/bundle
  - &restore-ios-bundler-cache
    key: v1-stock-goodcity-bundle-ios-{{ checksum "Gemfile.lock" }}
  - &save-ios-bundler-cache
    key: v1-stock-goodcity-bundle-ios-{{ checksum "Gemfile.lock" }}
    paths:
      - vendor/bundle

# -----------------------------
# Orbs
# -----------------------------

orbs:
  azure-cli: circleci/azure-cli@1.2.0

jobs:
  checkout_code:
    <<: *defaults
    steps:
      - checkout
      - save_cache:
          key: v1-stock-goodcity-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - ~/code

  package_dependencies:
    <<: *defaults
    steps:
      - restore_cache: *restore-repo-cache
      - restore_cache: *restore-yarn-cache
      - run: *yarn
      - save_cache: *save-yarn-cache
      - restore_cache: *restore-bower-cache
      - run: yarn run bower install
      - save_cache: *save-bower-cache

  test_cases:
    <<: *defaults
    docker:
      - image: circleci/node:10.22-browsers
    environment:
      JOBS: 1
    steps:
      - restore_cache: *restore-repo-cache
      - restore_cache: *restore-yarn-cache
      - restore_cache: *restore-bower-cache
      - run:
          name: Start Ember test server
          command: yarn run ember server --port 4203
          background: true
      - run:
          name: Wait for Ember test server to start
          command: dockerize -wait tcp://localhost:4203 -timeout 1m
      - run:
          name: Run Ember tests
          command: COVERAGE=true yarn run test:ci
      - persist_to_workspace:
          root: .
          paths:
            - coverage*/lcov.info

  www_build:
    <<: *defaults
    environment:
      JOBS: 1
    steps:
      - restore_cache: *restore-repo-cache
      - restore_cache: *restore-yarn-cache
      - restore_cache: *restore-bower-cache
      - run:
          command: npm rebuild node-sass
      - run:
          name: Ember build
          command: |
            case "$CIRCLE_BRANCH" in
              live)
                ENVIRONMENT=production
                ;;
              *)
                ENVIRONMENT=staging
            esac
            echo "Building for ENVIRONMENT: ${ENVIRONMENT}"
            EMBER_CLI_CORDOVA=0 ENVIRONMENT=${ENVIRONMENT} yarn run ember build --environment=production
      - run: mv dist/ dist-www
      - persist_to_workspace:
          root: .
          paths:
            - dist-www/

  www-deploy:
    <<: *defaults
    docker:
      - image: cimg/ruby:2.7.3
    steps:
      - restore_cache: *restore-repo-cache
      - restore_cache: *restore-bundle-cache
      - run: bundle config set --local deployment 'true' && (bundle check || bundle install --jobs=2 --retry=3)
      - save_cache: *save-bundle-cache
      - attach_workspace:
          at: ~/code
      - run: mv dist-www/ dist
      - azure-cli/install
      - azure-cli/login-with-service-principal
      - run:
          name: Upload to www server + azure
          command: |
            sudo ln -s /usr/local/bin/ruby /usr/local/bin/ruby2.7
            STAGE=$(if [ "$CIRCLE_BRANCH" == "live" ]; then echo production; else echo staging; fi)
            STAGE=$STAGE bundle exec fastlane web deploy
      - run:
          name: Upload Source Map to Rollbar
          command: |
            APP_VERSION=$(jq -r ".version" package.json)
            SOURCE_MAP_WITH_VARIABLE_NAME=$(grep sourceMappingURL dist/assets/stock-*.js)
            SOURCE_MAP=$(eval echo $SOURCE_MAP_WITH_VARIABLE_NAME | cut -c22-100)
            ASSET_HOST_URL=$(if [ "$CIRCLE_BRANCH" == "live" ]; then echo "https://stock.goodcity.hk/assets"; else echo "https://stock-staging.goodcity.hk/assets"; fi)
            curl https://api.rollbar.com/api/1/sourcemap/download -F access_token="${ROLLBAR_KEY}" -F version="${APP_VERSION}" -F minified_url=$ASSET_HOST_URL/$SOURCE_MAP

  ember_cordova_build:
    <<: *defaults
    environment:
      JOBS: 1
    steps:
      - restore_cache: *restore-repo-cache
      - restore_cache: *restore-yarn-cache
      - restore_cache: *restore-bower-cache
      - run:
          command: npm rebuild node-sass
      - run:
          name: Ember build
          command: |
            case "$CIRCLE_BRANCH" in
              live)
                ENVIRONMENT=production
                SCANDIT_LICENSE_KEY=$SCANDIT_LICENSE_KEY_ANDROID
                ;;
              *)
                ENVIRONMENT=staging
                SCANDIT_LICENSE_KEY=$SCANDIT_LICENSE_KEY_ANDROID_STAGING
            esac
            echo "Building for ENVIRONMENT: ${ENVIRONMENT}"
            EMBER_CLI_CORDOVA=1 SCANDIT_LICENSE_KEY=${SCANDIT_LICENSE_KEY} ENVIRONMENT=${ENVIRONMENT} yarn run ember build --environment=production
      - run: mv dist/ cordova/www
      - persist_to_workspace:
          root: .
          paths:
            - cordova/www

  android_build_and_deploy:
    <<: *defaults
    docker:
      - image: cimg/android:2021.10.2-node
    environment:
      JVM_OPTS: -Xmx3200m
      CIRCLE_ARTIFACTS: /home/circleci/code/cordova/platforms/android/app/build/outputs/apk/release/
      JAVA_HOME: /usr/lib/jvm/java-8-openjdk-amd64
    steps:
      - restore_cache: *restore-repo-cache
      - restore_cache: *restore-yarn-cache
      - restore_cache: *restore-bundle-cache
      - run: bundle config set --local deployment 'true' && (bundle check || bundle install --jobs=2 --retry=3)
      - save_cache: *save-bundle-cache
      - attach_workspace:
          at: ~/code
      - run: 
          name: Setup Environment variables
          command: |
            echo 'export ENVIRONMENT=$(if [ "$CIRCLE_BRANCH" == "live" ]; then echo production; else echo staging; fi)' >> $BASH_ENV
            echo 'export PATH=$PATH:`yarn bin`' >> $BASH_ENV
      - run:
          name: Install dependencies
          command: |
              sudo apt-get update
              sudo apt remove openjdk-11-*
              sudo apt-get install -y apt-transport-https ca-certificates wget dirmngr gnupg software-properties-common openjdk-8-jdk
              sudo npm install -g cordova@10
      - azure-cli/install
      - azure-cli/login-with-service-principal
      - run: az storage blob download --account-name $GOODCITY_STORAGE -c ci-app-secrets -n stock-$ENVIRONMENT-google-services.json -f ~/code/cordova/google-services.json
      - run: az storage blob download --account-name $GOODCITY_STORAGE -c ci-app-secrets -n goodcity.keystore -f ~/code/cordova/goodcity.keystore
      - run: az storage blob download --account-name $GOODCITY_STORAGE -c ci-app-secrets -n google-play-key.json -f ~/code/fastlane/google-play-key.json
      - run:
          name: Build android app
          command: |
            node rename_package.js
            cordova platform add android@10.1.1
            cordova plugins add @havesource/cordova-plugin-push@3.0.0
            if [ "$ENVIRONMENT" == "production" ]; then
              cordova build android --release -- \
                --packageType=apk --keystore=goodcity.keystore --storePassword="${GOODCITY_KEYSTORE_PASSWORD}" \
                --alias="${GOODCITY_KEYSTORE_ALIAS}" --password="${GOODCITY_KEYSTORE_PASSWORD}"
            else
              cordova build android --debug --device
            fi
          working_directory: cordova
      - store_artifacts:
          path: cordova/platforms/android/app/build/outputs/apk/
      - run:
          name: release android build
          command: bundle exec fastlane android ${ENVIRONMENT}
          working_directory: ~/code

  ios_build_and_deploy:
    macos:
      xcode: "12.0.1"
    working_directory: ~/code
    shell: /bin/bash --login -eo pipefail
    environment:
      CIRCLE_ARTIFACTS: /Users/distiller/code/cordova/platforms/ios/build/device
      HOMEBREW_NO_AUTO_UPDATE: 1
    steps:
      - checkout
      - run: brew install azure-cli node@10 && echo 'export PATH="/usr/local/opt/node@10/bin:$PATH"' >> $BASH_ENV
      - run: node --version
      - restore_cache: *restore-ios-yarn-cache
      - run: *yarn
      - save_cache: *save-ios-yarn-cache
      - restore_cache: *restore-ios-bower-cache
      - run: yarn run bower install
      - save_cache: *save-ios-bower-cache
      - run:
          name: Setup Environment variables
          command: |
            case "$CIRCLE_BRANCH" in
              live)
                echo 'export ENVIRONMENT=production' >> $BASH_ENV
                echo 'export SCANDIT_LICENSE_KEY=$SCANDIT_LICENSE_KEY_IOS' >> $BASH_ENV
                ;;
              *)
                echo 'export ENVIRONMENT=staging' >> $BASH_ENV
                echo 'export SCANDIT_LICENSE_KEY=$SCANDIT_LICENSE_KEY_IOS_STAGING' >> $BASH_ENV
            esac
      - run: EMBER_CLI_CORDOVA=1 SCANDIT_LICENSE_KEY=${SCANDIT_LICENSE_KEY} ENVIRONMENT=${ENVIRONMENT} yarn run ember build --environment=production
      - run: mv dist/ cordova/www
      - restore_cache: *restore-ios-bundler-cache
      - run: bundle config set --local deployment 'true' && (bundle check || bundle install --jobs=2 --retry=3)
      - save_cache: *save-ios-bundler-cache
      - run: az login --service-principal --tenant ${AZURE_SP_TENANT} -u ${AZURE_SP} -p ${AZURE_SP_PASSWORD}
      - run: mkdir -pv ~/Library/MobileDevice/Provisioning\ Profiles/
      - run: az storage blob download --account-name $GOODCITY_STORAGE -c ci-app-secrets -n stock-${ENVIRONMENT}.mobileprovision -f ~/Library/MobileDevice/Provisioning\ Profiles/stock-${ENVIRONMENT}.mobileprovision
      - run: az storage blob download --account-name $GOODCITY_STORAGE -c ci-app-secrets -n AuthKey_${APPSTORE_CONNECT_API_KEY_ID}.p8 -f ~/code/fastlane/AuthKey_${APPSTORE_CONNECT_API_KEY_ID}.p8
      - run: az storage blob download --account-name $GOODCITY_STORAGE -c ci-app-secrets -n hk.goodcity.${ENVIRONMENT}.p12 -f ~/code/fastlane/hk.goodcity.${ENVIRONMENT}.p12
      - run: gem install cocoapods
      - run: npm install -g cordova@10.0.0
      - run: bundle exec fastlane ios prepare_certificates cert:hk.goodcity.${ENVIRONMENT}.p12
      - run:
          name: iOS build
          command: |
            node rename_package.js
            cordova platform add ios@6.2.0
            cordova plugins add @havesource/cordova-plugin-push@3.0.0 --variable SENDER_ID="XXXXXXX"
            bundle exec rake ${ENVIRONMENT} ios app:build
          working_directory: cordova
      # - run:
      #     name: Build iOS app
      #     command: |
      #       node rename_package.js
      #       cordova platform add ios@6.2.0
      #       cordova plugins add @havesource/cordova-plugin-push@3.0.0 --variable SENDER_ID="XXXXXXX"
      #       if [ "$ENVIRONMENT" == "staging" ]; then
      #         cordova plugin add https://github.com/testfairy/testfairy-cordova-plugin
      #         cordova build ios --release --device \
      #           --codeSignIdentity="iPhone Developer" --developmentTeam="6B8FS8W94M" --packageType="developer" --icloud_container_environment="Development"
      #       else
      #         cordova build ios --release --device \
      #           --codeSignIdentity="iPhone Developer" --developmentTeam="6B8FS8W94M" --packageType="app-store" --icloud_container_environment="Production"
      #       fi
      #     working_directory: cordova
      - store_artifacts:
          path: cordova/platforms/ios/build/device
      - run:
          name: Release ios build
          command: bundle exec fastlane ios ${ENVIRONMENT}

workflows:
  version: 2
  build_and_bundle:
    jobs:
      - checkout_code
      - package_dependencies:
          requires:
            - checkout_code
      - test_cases:
          requires:
            - package_dependencies
      - www_build:
          requires:
            - test_cases
          filters:
            branches:
              only: /^(master|live)$/
      - www-deploy:
          requires:
            - www_build
          filters:
            branches:
              only: /^(master|live)$/
      - ember_cordova_build:
          requires:
            - package_dependencies
          filters:
            branches:
              only: /^(master|live)$/
      - android_build_and_deploy:
          requires:
            - test_cases
            - ember_cordova_build
          filters:
            branches:
              only: /^(master|live)$/
      - ios_build_and_deploy:
          requires:
            - test_cases
            - package_dependencies
          filters:
            branches:
              only: /^(master|live)$/
