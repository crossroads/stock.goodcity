# This configuration was automatically generated from a CircleCI 1.0 config.
# It should include any build commands you had along with commands that CircleCI
# inferred from your project structure. We strongly recommend you read all the
# comments in this file to understand the structure of CircleCI 2.0, as the idiom
# for configuration has changed substantially in 2.0 to allow arbitrary jobs rather
# than the prescribed lifecycle of 1.0. In general, we recommend using this generated
# configuration as a reference rather than using it in production, though in most
# cases it should duplicate the execution of your original 1.0 config.
version: 2

aliases:
  defaults: &defaults
      docker:
        - image: circleci/node:6-stretch-browsers-legacy
      working_directory: ~/stock.goodcity
  restore-repo-cache: &restore-repo-cache
      key: v1-repo-{{ .Environment.CIRCLE_SHA1 }}
  restore-yarn-cache: &restore-yarn-cache
      key: v1-yarn-packages-{{ checksum "yarn.lock" }}
  save-yarn-cache: &save-yarn-cache
      key: v1-yarn-packages-{{ checksum "yarn.lock" }}
      paths:
        - ~/.cache/yarn
        - node_modules
  yarn: &yarn
      |
        yarn install --non-interactive --cache-folder ~/.cache/yarn
  restore-bower-cache: &restore-bower-cache
      key: v1-bower-components-{{ checksum "bower.json" }}
  save-bower-cache: &save-bower-cache
      key: v1-bower-components-{{ checksum "bower.json" }}
      paths:
        - bower_components

  restore-bundle-cache: &restore-bundle-cache
      key: v1-bundle-{{ checksum "Gemfile.lock" }}
  save-bundle-cache: &save-bundle-cache
      key: v1-bundle-{{ checksum "Gemfile.lock" }}
      paths:
          - vendor/bundle

jobs:
  checkout_code:
    <<: *defaults
    steps:
      - checkout
      - save_cache:
          key: v1-repo-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - ~/stock.goodcity

  package_dependencies:
    <<: *defaults
    docker:
      - image: circleci/ruby:2.5.1-node
    steps:
      - restore-cache: *restore-repo-cache
      - restore-cache: *restore-yarn-cache
      - run: *yarn
      - save-cache: *save-yarn-cache
      - restore-cache: *restore-bower-cache
      - run: yarn run bower install
      - save-cache: *save-bower-cache

  test_cases:
    <<: *defaults
    steps:
      - restore-cache: *restore-repo-cache
      - restore-cache: *restore-yarn-cache
      - restore-cache: *restore-bower-cache
      - run:
          name: Start Ember test server
          command: |
            npm rebuild node-sass
            yarn run ember server --port 4203
          background: true
      - run:
          name: Wait for Ember test server to start
          command: dockerize -wait tcp://localhost:4203 -timeout 1m
      - run:
          name: Run Ember tests
          command: COVERAGE=true yarn run ember test
      - persist_to_workspace:
          root: .
          paths:
            - coverage*/lcov.info

  upload-coverage:
    <<: *defaults
    steps:
      - restore-cache: *restore-repo-cache
      - restore-cache: *restore-yarn-cache
      - restore-cache: *restore-bower-cache
      - attach_workspace:
          at: ~/stock.goodcity
      - run:
          name: Upload coverage results to Code Climate
          command: |
            yarn run codeclimate-test-reporter < coverage*/lcov.info

  www_build:
    <<: *defaults
    environment:
      EMBER_CLI_CORDOVA: "0"
    steps:
      - restore-cache: *restore-repo-cache
      - restore-cache: *restore-yarn-cache
      - restore-cache: *restore-bower-cache
      - run:
          name: Set Environment variables
          command: |
            echo 'export APP_SHA=$(echo $CIRCLE_SHA1 | cut -c1-7)' >> $BASH_ENV
            echo 'export staging=$(if [ "$CIRCLE_BRANCH" == "live" ]; then echo false; else echo true; fi)' >> $BASH_ENV
      - run:
          command: |
            npm rebuild node-sass
            yarn run ember build --environment=production
      - run: mv dist/ dist-www
      - persist_to_workspace:
          root: .
          paths:
            - dist-www/

  www-deploy:
    <<: *defaults
    docker:
      - image: circleci/ruby:2.5.1-node
    steps:
      - restore-cache: *restore-repo-cache
      - restore-cache: *restore-bundle-cache
      - run: bundle check --path=vendor/bundle || bundle install --deployment --jobs=4 --retry=3
      - save-cache: *save-bundle-cache
      - attach_workspace:
          at: ~/stock.goodcity
      - run: mv dist-www/ dist
      - run:
          name: Setup Environment
          command: echo 'export STAGE=$(if [ "$CIRCLE_BRANCH" == "live" ]; then echo production; else echo staging; fi)' >> $BASH_ENV
      # - run: bundle exec cap $STAGE deploy:upload

  ember_cordova_build:
    <<: *defaults
    environment:
        EMBER_CLI_CORDOVA: "1"
    steps:
      - restore-cache: *restore-repo-cache
      - restore-cache: *restore-yarn-cache
      - restore-cache: *restore-bower-cache
      - run:
          name: Setup Environment variables
          command: |
            echo 'export APP_SHA=$(echo $CIRCLE_SHA1 | cut -c1-7)' >> $BASH_ENV
            echo 'export APP_VERSION=$(jq -r ".version" package.json)' >> $BASH_ENV
      - run:
          command: |
              npm rebuild node-sass
              yarn run ember build --environment=production
      - run: mv dist/ cordova/www
      - persist_to_workspace:
          root: .
          paths:
            - cordova/www

  android_build_and_deploy:
    <<: *defaults
    docker:
      - image: circleci/android:api-25-node8-alpha
    environment:
      JVM_OPTS: -Xmx3200m
      KEYSTORE: goodcity.keystore
      CIRCLE_ARTIFACTS: /home/circleci/stock.goodcity/cordova/platforms/android/build/outputs/apk

    steps:
      - restore-cache: *restore-repo-cache
      - restore-cache: *restore-yarn-cache
      - restore-cache: *restore-bundle-cache
      - run: bundle install --deployment --jobs=4 --retry=3
      - save-cache: *save-bundle-cache
      - attach_workspace:
          at: ~/stock.goodcity
      - run:
          name: Setup Environment variables
          command: |
              echo 'export ENVIRONMENT=$(if [ "$CIRCLE_BRANCH" == "live" ]; then echo production; else echo staging; fi)' >> $BASH_ENV
              echo 'export PATH=$PATH:`yarn bin`' >> $BASH_ENV
              echo 'export PATH=$PATH:$ANDROID_HOME/tools/gradle/bin' >> $BASH_ENV
      - run:
          name: Install Gradle 3.3
          command: |
            wget -O /tmp/gradle.zip https://downloads.gradle.org/distributions/gradle-3.3-bin.zip
            unzip -d $ANDROID_HOME/tools /tmp/gradle.zip
            mv $ANDROID_HOME/tools/gradle-3.3 $ANDROID_HOME/tools/gradle
      - run:
          name: android build
          command: bundle exec rake ${ENVIRONMENT} android app:build
          working_directory: cordova
      - store_artifacts:
          path: cordova/platforms/android/build/outputs/apk/
      # - run:
      #     name: release android build
      #     command: bundle exec fastlane android ${ENVIRONMENT}
      #     working_directory: ~/stock.goodcity

  ios_build_and_deploy:
    macos:
      xcode: "9.2.0"
    working_directory: ~/stock.goodcity
    steps:
      - checkout
      - run: *yarn
      - run: yarn run bower install
      - attach_workspace:
          at: ~/stock.goodcity
      - run:
          name: Setup Environment variables
          command: echo 'export ENVIRONMENT=$(if [ "$CIRCLE_BRANCH" == "live" ]; then echo production; else echo staging; fi)' >> $BASH_ENV
      - run:
          name: setup pod
          command: pod setup
      - run:
          name: decode Certificates
          context: org-global
          command: base64 -D -o Certificates.p12 <<< $Certificates
      - run:
          name: make Provisioning Profiles directory
          command: mkdir -pv ~/Library/MobileDevice/Provisioning\ Profiles/
      - run:
          name: decode Provisioning Profiles
          context: org-global
          command: base64 -D -o ~/Library/MobileDevice/Provisioning\ Profiles/App_Store.mobileprovision <<< "${PROVISIONING_PROFILE}"
      - run:
          name: iOS build
          command: bundle exec rake ${ENVIRONMENT} ios app:build
          working_directory: cordova


workflows:
    version: 2
    build_and_bundle:
      jobs:
        - checkout_code
        - package_dependencies:
            requires:
              - checkout_code
        - test_cases:
            requires:
              - package_dependencies
        - upload-coverage:
            requires:
              - package_dependencies
              - test_cases
        - www_build:
            requires:
              - upload-coverage
        - www-deploy:
            requires:
              - www_build
        - ember_cordova_build:
            requires:
              - www-deploy
        - android_build_and_deploy:
            requires:
              - ember_cordova_build
        - ios_build_and_deploy:
            requires:
              - ember_cordova_build



