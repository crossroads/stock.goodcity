default_platform :android

platform :ios do

  before_all do
    ipa_file_path = Dir["#{ENV["CIRCLE_ARTIFACTS"]}/*.ipa"].first
    ENV["PILOT_IPA"] = ENV["TESTFAIRY_IPA_PATH"] = ipa_file_path
    COPYRIGHT = "#{Time.now.year} Crossroads Foundation Limited"
  end

  lane :prepare_certificates do |options|

    sh("base64 -D -o Certificates.p12 <<< \"#{options[:cert]}\"", log: false)
    create_keychain(
        name: "default_keychain",
        default_keychain: true,
        unlock: true,
        password: ENV['KEYCHAIN_PWD']
    )
    import_certificate(
      certificate_path: "fastlane/Certificates.p12",
      certificate_password: ENV['CERTIFICATE_PASSWORD'],
      keychain_name: "default_keychain",
      keychain_password: ENV['KEYCHAIN_PWD']
    )
    unlock_keychain(path:"default_keychain", password:ENV['KEYCHAIN_PWD'])
    sh "security set-keychain-settings -t 3600 -l ~/Library/Keychains/default_keychain-db"
  end

  desc "Generate staging build (just upload to TestFairy)"
  lane :staging do
    raise_if_no_env_var(["FL_TESTFAIRY_API_KEY", "TESTFAIRY_IPA_PATH"])
    testfairy
  end

  desc "Upload to TestFlight"
  lane :beta do
    raise_if_no_env_var(["APP_VERSION", "PILOT_USERNAME", "PILOT_IPA", "PILOT_TESTER_EMAIL", "ITUNESCONNECT_PASSWORD"])
    version_number = ENV["APP_VERSION"]
    sh %{ source ~/.circlerc; bundle exec fastlane fastlane-credentials add --username $PILOT_USERNAME --password $ITUNESCONNECT_PASSWORD }
    latest_testflight_build_number(version: version_number, username: ENV['PILOT_USERNAME'])
    pilot
    deliver(
      username: ENV['PILOT_USERNAME'],
      skip_binary_upload: true,
      skip_screenshots: true,
      app_version: version_number,
      copyright: COPYRIGHT,
      force: true # to prevent fastlane from crashing waiting for user confirmation
    )
  end

  after_all do
    # remove credentials from keychain
    sh %{ source ~/.circlerc; bundle exec fastlane fastlane-credentials remove --username $PILOT_USERNAME }
  end

  error do |lane, exception|
    puts "iOS: Fastlane '#{lane}' errored"
  end

end

platform :android do

  before_all do
    apk_file_path = Dir["#{ENV["CIRCLE_ARTIFACTS"]}/*.apk"].first
    ENV["SUPPLY_APK"] = ENV["TESTFAIRY_IPA_PATH"] = apk_file_path
    raise_if_no_env_var("GOOGLE_PLAY_KEY_FILE")
    ENV["SUPPLY_JSON_KEY"] = File.join(Dir.pwd, ENV["GOOGLE_PLAY_KEY_FILE"])
    raise "Google Play private key file not found! (#{ENV["SUPPLY_JSON_KEY"]})" unless File.exist?(ENV["SUPPLY_JSON_KEY"])
  end

  desc "Generate staging build (just upload to TestFairy)"
  lane :staging do
    raise_if_no_env_var(["FL_TESTFAIRY_API_KEY", "TESTFAIRY_IPA_PATH"])
    testfairy
  end

  desc "Upload to GooglePlay beta track"
  lane :beta do
    raise_if_no_env_var(["SUPPLY_APK", "SUPPLY_JSON_KEY"])
    supply(
      track: "beta",
      skip_upload_images: true,
      skip_upload_screenshots: true
    )
  end

  error do |lane, exception|
    puts "Android: Fastlane '#{lane}' errored"
  end

end

# raise_if_no_env_var("ENV1")
# raise_if_no_env_var(["ENV1", "ENV2"])
def raise_if_no_env_var(args)
  [args].flatten.each do |e|
    raise "Please specify ENV VAR [#{e}]" if (ENV[e] || "").empty?
  end
end
