require 'json'
require_relative "./release_utils"

update_fastlane

default_platform :android

class FastlaneCore::Shell
  def error(message)
    UI.user_error!(message)
  end
end

def xsh(cmd)
  sh cmd, error_callback: -> (err) { UI.user_error!(err) }
end

platform :web do
  before_all do
    ReleaseUtils::Azure.assert_logged_in!
  end

  desc "Release web to stage"
  lane :deploy do
    stage = ReleaseUtils.get_env_var("STAGE")
    ReleaseUtils::Web.upload(app: 'stock', stage: stage)
  end
end

platform :ios do

  before_all do
    ipa_file_path = Dir["#{ENV["CIRCLE_ARTIFACTS"]}/*.ipa"].first
    ENV["PILOT_IPA"] = ENV["TESTFAIRY_IPA_PATH"] = ipa_file_path
    COPYRIGHT = "#{Time.now.year} Crossroads Foundation Limited"

    APPSTORE_API_KEY = app_store_connect_api_key({
      key_id:       ENV['APPSTORE_CONNECT_API_KEY_ID'],
      issuer_id:    ENV['APPSTORE_CONNECT_API_KEY_ISSUER_ID'],
      key_content:  File.read("./AuthKey_#{ENV['APPSTORE_CONNECT_API_KEY_ID']}.p8")
    })
  end

  lane :prepare_certificates do |options|
    create_keychain(
      name: "default_keychain",
      default_keychain: true,
      unlock: true,
      password: ENV['KEYCHAIN_PWD']
    )
    import_certificate(
      certificate_path: "fastlane/hk.goodcity.#{ENV['ENVIRONMENT']}.p12",
      certificate_password: ENV['CERTIFICATE_PASSWORD'],
      keychain_name: "default_keychain",
      keychain_password: ENV['KEYCHAIN_PWD']
    )
    unlock_keychain(path:"default_keychain", password:ENV['KEYCHAIN_PWD'])
    xsh "security set-keychain-settings -t 3600 -l ~/Library/Keychains/default_keychain-db"
  end

  desc "Generate staging build (just upload to TestFairy)"
  lane :staging do
    raise_if_no_env_var(["FL_TESTFAIRY_API_KEY", "TESTFAIRY_IPA_PATH"])
    testfairy(auto_update: 'on')
  end

  desc "Upload to the AppStore"
  lane :production do
    raise_if_no_env_var(["PILOT_USERNAME", "PILOT_IPA", "PILOT_TESTER_EMAIL", "ITUNESCONNECT_PASSWORD"])
    package_json = File.open(File.join(File.expand_path('../../',  __FILE__), 'package.json'), 'r').read
    version_number = JSON.parse(package_json)['version']
    xsh %{ source ~/.circlerc; bundle exec fastlane fastlane-credentials add --username $PILOT_USERNAME --password $ITUNESCONNECT_PASSWORD }
    latest_testflight_build_number(api_key: APPSTORE_API_KEY, version: version_number)
    pilot
    deliver(
      username: ENV['PILOT_USERNAME'],
      skip_binary_upload: true,
      skip_screenshots: true,
      app_version: version_number,
      copyright: COPYRIGHT,
      api_key: APPSTORE_API_KEY,
      precheck_include_in_app_purchases:  false,
      force: true # to prevent fastlane from crashing waiting for user confirmation
    )
  end

  after_all do
    # remove credentials from keychain
    xsh %{ source ~/.circlerc; bundle exec fastlane fastlane-credentials remove --username $PILOT_USERNAME }
  end

  error do |lane, exception|
    puts "iOS: Fastlane '#{lane}' errored"
  end

end

platform :android do

  before_all do
    ENV["SUPPLY_APK"] = ENV["TESTFAIRY_IPA_PATH"] = Dir["#{ENV["APK_FILE_PATH"]}"].first
    ENV["SUPPLY_JSON_KEY"] = File.join(Dir.pwd, "google-play-key.json")
    raise "Google Play private key file not found! (#{ENV["SUPPLY_JSON_KEY"]})" unless File.exist?(ENV["SUPPLY_JSON_KEY"])
  end

  desc "Generate staging build (just upload to TestFairy)"
  lane :staging do
    raise_if_no_env_var(["FL_TESTFAIRY_API_KEY", "TESTFAIRY_IPA_PATH"])
    testfairy(auto_update: 'on')
  end

  desc "Upload to GooglePlay beta track"
  lane :production do
    raise_if_no_env_var(["SUPPLY_APK", "SUPPLY_JSON_KEY"])
    supply(
      track: "beta",
      skip_upload_images: true,
      skip_upload_screenshots: true
    )
  end

  error do |lane, exception|
    puts "Android: Fastlane '#{lane}' errored"
  end

end

# raise_if_no_env_var("ENV1")
# raise_if_no_env_var(["ENV1", "ENV2"])
def raise_if_no_env_var(args)
  [args].flatten.each do |e|
    raise "Please specify ENV VAR [#{e}]" if (ENV[e] || "").empty?
  end
end
